스프링을 만든 이유
자바 언어 기반 프레임워크 (객체 지향 언어)
객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
즉, 좋은 객체 지향 애플리케이션을 개발할 수 있게 도외주는 프레임워크이다.

객체 지향 특징
추상화
캡슐화
상속
다형성

객체 지향 프로그램밍이란?
유연하고 변경이 용이하다. 즉, 레고 블럭 조립하듯이, 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법이다.
다형성!

예제1) 자동차 종류가 바뀐다 하더라도 운전자 역할을 가진 객체는 운전 가능하다.
운전자(클라이언트)는 자동차 내구 구현에 대해서는 알 필요 없다.
자동차 역할만 구현한다면, 새로운 기능을 구현하는 자동차가 나와도 운전자(클라이언트)에 영향을 주지 않는다.

예제2) 로미오 역할, 줄리엣 역할에 배역이 누가 맡든 로미오와 줄리엣의 역할만 소화해낸다면 문제 없음.
즉, 배우는 대체 가능하다. 또, 줄리엣의 구현이 바뀐다 하더라도 로미오에 영향을 주지 않는다.

위의 예제들을 통하여 유연하고 변경이 용이하다는 의미를 곱씹을 수 있다.

클라이언트는 대상의 역할(인터페이스)만 알면 된다. 내부구조를 알 필요 없다.
설령, 구현대상의 내부구조가 변경되어도 영향을 받지 않는다. 구현 대상 자체를 변경하더라도 영향을 받지 않는다.

다형성의 본질
클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.
확장 가능한 설계이다.

한계
역할(인터페이스) 자체가 변하면, 클라이언트, 서버 모두에 큰 변경이 발생한다.'

SOLID 원칙
로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
SRP : 단일 책임 원칙(single responsibility principle)
한 클래스의 하나의 책임만 가져야 한다. 
하나의 책임이라는 것은 모호(클수도, 작을수도 또는 문맥과 상황에 따라 다르다)
중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것.
예) UI 변경, 객체의 생성과 사용을 분리

OCP : 개방 - 폐쇠 원칙(Open/Closed Principle)
소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야한다.
다형성을 활용!
인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현 (변경 x)
구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다.
분명 다형성을 사용했지만 OCP 원칙을 지킬 수 없다.
객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자(스프링 컨테이너)가 필요!!

LSP : 리스코프 치환 원칙(Liskov Subsitution Principle)
프로그램의 객체는 프로그램의 정확성을 깨트리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야한다.
다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.
단순히 컴파일에 성공하는 것을 넘어서는 이야기

예) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반, 느리더라도 앞으로 가야함.
엑셀 구현을 -10으로 하여 뒤로 가게 하면 컴파일 단계에서는 아무런 문제가 없지만, LSP 위반이라는 의미이다.

ISP : 인터페이스 분리 원칙(Interface Segregation Principle)
특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음.
인터페이스가 명확해지고, 대체 가능성이 높아진다.

DIP : 의존관계 역전 원칙(Dependency Inversion Principle)
구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
역할(Role)에 의존하게 해야 한다는 것과 같다.
의존한다는 의미는 쉽게 말하면, 코드에 대해서 안다와 같은 의미이다.

다형성 만으로는 OCP, DIP를 지킬 수 없다. 자바의 한계!!

<단축키>
오류난 곳으로 이동 : F2

프레임워크 vs 라이브러리
프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크이다. (JUnit) 즉, IoC가 이루어져있다.
예를 들어 @BeforeEach 와 같은 어노테이션을 사용하면, 알아서 각 @Test가 실행되기 전에 @BeforeEach 가 실행된다.
반면, 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 프레임워크가 아니라 라이브러리이다.

프레임워크와 라이브러리의 차이점은 "제어 흐름"의 권한이 어디에 있는가입니다.
라이브러리를 사용할 때 사용자는 애플리케이션 코드의 흐름을 직접 제어해야 합니다.
개발 시 필요한 기능이 있을 경우 능동적으로 라이브러리를 호출하여 사용하거나 기존에 구성된 함수나 코드를 가져다 써야 합니다. 
반면 프레임워크는 애플리케이션의 코드가 프레임워크에 의해 사용됩니다.
애플리케이션 코드는 프레임워크가 짜 놓은 틀에서 수동적으로 동작하기 때문에 제어의 흐름은 프레임워크가 가지고 있고 사용자가 그 안에 필요한 코드를 작성하게 됩니다.

정적인 클래스 의존관계
import 코드만 보고 의존관계를 쉽게 판단할 수 있다. 정적인 의존관계는 애플리케이션을 실행하지 않아도 분석할 수 있ㄷ.
그런데 이러한 클래스 의존관계 만으로는 실제 어떤 객체가 주입 될지 알 수 없다.

동적인 객체 인스턴스 의존관계
애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계이다.
애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트 서버의 실제 의존과계가 연결 되는 것을 의존관계 주입(DI)이라고 한다.
의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고(==코드를 손대지 않고), 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.

IoC 컨테이너, DI 컨테이너
AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC 컨테이너 혹은 DI 컨테이너라고 한다.
의존관계 주입에 초점을 맞추어 최근에는 주로 DI 컨테이너라 한다. 또는 어샘블러, 오브젝트 팩토리 등으로 불리기도 한다.

주의! 빈 이름은 항상 다른 이름을 부여해야한다. 이유는 다른 빈이 무시되거나, 기존 빈을 덮어버리는 등 설정에 따라 오류가 발생한다.
스프링 빈의 key는 메소드 이름이고, 값은 반환객체이다.

스프링은 빈을 생성하고(준비), 의존관계를 주입하는 단계(완료)가 나누어져있다.

스프링 빈 조회 :
부모 타입 조회 시, 자식 타입도 함께 조회한다. 그래서 모든 자바 객체의 최고 부모인 'Object' 타입으로 조회하면 모든 스프링 빈을 조회한다.